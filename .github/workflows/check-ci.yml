# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "prerelease/setup-workflow/from_main" ]
  pull_request:
    branches: [ "prerelease/setup-workflow/from_main" ]

jobs:
  release-build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    # - uses: actions/checkout@v4
    # - name: Set up Python ${{ matrix.python-version }}
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: ${{ matrix.python-version }}
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     python -m pip install flake8 pytest
    #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     pytest

    - name: Checkout sources
      uses: actions/checkout@v4 # v4.2.2
      with:
        fetch-depth: 0 # Disable shallow clones to improve sonarcloud analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3 # v5.3.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: |
        sudo apt install pipx
        pipx install poetry==1.8.4
        poetry --version

    - name: Install dependencies
      run: |
        poetry install

    - name: Check code style
      run: |
        poetry run poe check-format

    - name: Lint code
      run: |
        poetry run poe lint

    - name: Check typing
      run: |
        poetry run poe typing

    - name: Run tests and generate coverage report
      run: |
        poetry run poe test-coverage

    - name: Run Sonar analysis
      uses: sonarsource/sonarcloud-github-action@383f7e52eae3ab0510c3cb0e7d9d150bbaeab838 # v3.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: |
          -Dsonar.python.coverage.reportPaths=coverage.xml

    - name: Build wheel
      run: |
        poetry build
    - name: Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: mechaphlowers-wheel-linux-${{ matrix.python.name }}
        path: dist/*.whl

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: mechaphlowers-wheel-linux-${{ matrix.python.name }}
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
