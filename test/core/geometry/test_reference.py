# Copyright (c) 2024, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# SPDX-License-Identifier: MPL-2.0

import numpy as np
import pytest
from mechaphlowers.core.geometry.references import cable2span, translate_cable_to_span

def test_cable2span_basic():
    x: np.ndarray = np.array([[1, 2, 3, 4], [10, 12, 14, 16]]).T
    z: np.ndarray = np.array([[20, 18 , 17, 19], [19, 17, 15, 17]]).T
    beta: np.ndarray = 0
    
    xs, ys, zs = cable2span(x, z, beta)
    
    assert len(xs) == len(z)
    # assert np.allclose(result, z)


from mechaphlowers.core.geometry.references import spans2vector

def test_spans2vector():
    x = np.array([[1, 2], [3, 4]])
    y = np.array([[5, 6], [7, 8]])
    z = np.array([[9, 10], [11, 12]])
    
    expected_output = np.array([
        [1, 5, 9],
        [2, 6, 10],
        [3, 7, 11],
        [4, 8, 12]
    ])
    
    result = spans2vector(x, y, z)
    
    assert np.array_equal(result, expected_output), f"Expected {expected_output}, but got {result}"

def test_spans2vector_empty():
    x = np.array([[]])
    y = np.array([[]])
    z = np.array([[]])
    
    # expected_output = np.array([[]]) so we check that size == 0
    
    result = spans2vector(x, y, z)
    
    assert result.size == 0

def test_spans2vector_single_point():
    x = np.array([[1]])
    y = np.array([[2]])
    z = np.array([[3]])
    
    expected_output = np.array([[1, 2, 3]])
    
    result = spans2vector(x, y, z)
    
    assert np.array_equal(result, expected_output), f"Expected {expected_output}, but got {result}"


def test_translate_cable_to_span():
    
    altitude = np.array([50.0, 40.0, 20.0, 10.0])
    span_length = np.array([100.0, 200.0, 300.0, np.nan])
    x_in = np.array([[-99.83421563938445, -149.58689089845706, -166.41631740898708], [-88.72310452827334, -127.36466867623483, -133.08298407565374], [-77.61199341716224, -105.14244645401261, -99.74965074232041], [-66.50088230605112, -82.9202242317904, -66.41631740898708], [-55.38977119494001, -60.69800200956817, -33.08298407565374], [-44.278660083828896, -38.47577978734594, 0.25034925767960203], [-33.167548972717796, -16.253557565123742, 33.583682591012916], [-22.056437861606682, 5.968664657098486, 66.91701592434626], [-10.945326750495568, 28.190886879320715, 100.2503492576796], [0.1657843606155467, 50.41310910154294, 133.58368259101292]])
    z_in = np.array([[10.000027484454499, 22.543635341861325, 27.950996373999338], [7.892465990400721, 16.309663919347848, 17.81588867365036], [6.035725912277301, 11.09573132895414, 9.98303742108253], [4.428890303670219, 6.891536749134786, 4.4176170485698], [3.0711656328586967, 3.6887742309041904, 1.0948831919131985], [1.9618813909314525, 1.4811162883232587, 6.267475205490314e-05], [1.1004897606577968, 0.2642013977043334, 1.1282878256807516], [0.4865653459493746, 0.03562538083679012, 4.484574836138955], [0.11980496177910194, 0.7949366552120196, 10.083846062855395], [2.7484454490078747e-05, 2.5436353418613056, 17.950996373999327]])
    
    x_out = np.array([[0.0, 100.0, 300.0], [11.111111111111114, 122.22222222222223, 333.33333333333337], [22.222222222222214, 144.44444444444446, 366.6666666666667], [33.33333333333333, 166.66666666666666, 400.0], [44.44444444444444, 188.88888888888889, 433.33333333333337], [55.55555555555556, 211.11111111111111, 466.6666666666667], [66.66666666666666, 233.33333333333331, 500.0], [77.77777777777777, 255.55555555555554, 533.3333333333334], [88.88888888888889, 277.77777777777777, 566.6666666666667], [100.0, 300.0, 600.0]])
    z_out = np.array([[50.0, 40.0, 20.0], [47.892438505946224, 33.76602857748652, 9.864892299651022], [46.0356984278228, 28.552095987092812, 2.032041047083192], [44.42886281921572, 24.34790140727346, -3.5333793254295385], [43.071138148404195, 21.145138889042865, -6.85611318208614], [41.961853906476954, 18.937480946461932, -7.950933699247283], [41.100462276203295, 17.72056605584301, -6.8227085483185865], [40.486537861494874, 17.491990038975466, -3.4664215378603833], [40.119777477324604, 18.251301313350694, 2.132849688856057], [39.99999999999999, 19.99999999999998, 9.99999999999999]])
    
    x_1, z_1 = translate_cable_to_span(x_in, z_in, altitude, span_length)
    
    np.testing.assert_almost_equal(x_1, x_out)
    np.testing.assert_almost_equal(z_1, z_out)
    